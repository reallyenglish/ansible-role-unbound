---

- set_fact:
    unbound_chroot_dev_dir: "{{ unbound_config_chroot }}/dev"

- assert:
    that:
      - unbound_config_chroot | length > 0
      - unbound_chroot_dev_dir != '/dev'

- name: Create dev mount point in chroot directory
  file:
    path: "{{ unbound_chroot_dev_dir }}"
    state: directory

- name: Copy mk_chroot.sh

  # mfs cannot survive reboots. Add a script to re-create chroot environment
  copy:
    src: files/chroot/OpenBSD/mk_chroot.sh
    dest: "{{ unbound_script_dir }}/mk_chroot"
    mode: 755

- name: Test if /etc/rc.local exists
  stat:
    path: /etc/rc.local
  register: register_rc_local
  changed_when: false

- name: Create /etc/rc.local if it does not exist
  file:
    path: /etc/rc.local
    state: touch
  when:
    - not register_rc_local.stat.exists

- name: Register mk_chroot to rc.local

  # Run the script upon boot
  lineinfile:
    dest: /etc/rc.local
    line: "[ -x /usr/local/bin/mk_chroot ] && /usr/local/bin/mk_chroot {{ unbound_config_chroot }}"

- name: Add mfs to fstab(5)
  mount:
    # By default, most of disk devices are mounted with 'nodev' in OpenBSD. To
    # create device files in chroot directory, create a small mfs disk.
    name: "{{ unbound_chroot_dev_dir }}"
    src: swap
    opts: "rw,nosuid,-s=256k"
    fstype: mfs
    # XXX `state: mounted` cannot be used here because a bug in ansible, which causes:
    # "Error mounting /var/unbound/dev: mount_mfs: -o remount: option not supported\n
    state: present

- name: See if mfs is mounted
  shell: mount -t mfs | cut -d ' ' -f 3
  register: mount_mfs_mounted
  changed_when: false
  check_mode: no

- name: Mount mfs
  command: mount "{{ unbound_chroot_dev_dir }}"
  when:
    - not unbound_chroot_dev_dir in mount_mfs_mounted.stdout_lines
  register: register_mount_unbound_chroot_dev_dir

- name: Execute mk_chroot
  command: "{{ unbound_script_dir }}/mk_chroot {{ unbound_config_chroot }}"
  args:
    creates: "{{ unbound_chroot_dev_dir }}/random"
  when:
    - register_mount_unbound_chroot_dev_dir.changed
