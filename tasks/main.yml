---
# tasks file for ansible-role-unbound

- include_vars: "{{ ansible_os_family }}.yml"

- include: deprecate.yml

- set_fact:
    unbound_flags_merged: "{{ unbound_flags_default | combine(unbound_flags) }}"

- include: "install-{{ ansible_os_family }}.yml"

- include: "x509.yml"
  when:
    - unbound_include_role_x509_certificate

- include: "configure-{{ ansible_os_family }}.yml"

- name: Register unbound version
  shell: "unbound -h | grep -E '^Version[[:space:]]+[[:digit:].]+$' | cut -f 2 -d' '"
  register: register_unbound_version
  changed_when: false
  check_mode: no

- set_fact:
    # unbound_version is available for use from this point. note that this
    # fact, unlike facts defined by "setup" action, cannot be used in playbooks,
    # group_var, etc.
    unbound_version: "{{ register_unbound_version.stdout }}"

- assert:
    that:
      - unbound_version | match('\d+[\d.]+\d+')

- include: "chroot-{{ ansible_os_family }}.yml"
  when:
    - unbound_config_chroot != ''

- name: Create unbound_script_dir
  file:
    path: "{{ unbound_script_dir }}"
    state: directory

- name: Create ansible-unbound-checkconf
  copy:
    dest: "{{ unbound_script_dir }}/ansible-unbound-checkconf"
    src: ansible-unbound-checkconf.sh
    mode: 0755

- name: Make unbound_conf_dir writable by unbound_user
  file:
    path: "{{ unbound_conf_dir }}"
    mode: 0775
    owner: root
    group: "{{ unbound_group }}"

- name: Create key files
  command: "unbound-control-setup -d {{ unbound_conf_dir }}"
  args:
    creates: "{{ unbound_config_server_key_file }}"

  # to validate unbound.conf(5), keys must be there even if you do not use them
  # (control-use-cert: no) because:
  #
  # * control-enable is set to "yes", control-use-cert is set to "no"
  # * (server|control)-(key|cert)-file are not specified because you would not
  #   use them
  # * unbound-checkconf validates the file, but it sets default values for
  #   missing configs, in this case, (server|control)-(key|cert)-file
  # * unbound-checkconf fails because the files are not there
  become_user: "{{ unbound_user }}"
  vars:

    # fix "Failed to set permissions on the temporary files Ansible needs to
    # create when becoming an unprivileged user" in ansible 2.1
    #
    # https://docs.ansible.com/ansible/become.html#becoming-an-unprivileged-user
    ansible_ssh_pipelining: true

- name: Do chgrp unbound_group all keys
  file:
    mode: 0640
    owner: root
    group: "{{ unbound_group }}"
    path: "{{ item }}"
  with_items:
    - "{{ unbound_config_server_key_file }}"
    - "{{ unbound_config_server_cert_file }}"
    - "{{ unbound_config_control_key_file }}"
    - "{{ unbound_config_control_cert_file }}"

- name: Create unbound.conf
  template:
    src: unbound.conf.j2
    dest: "{{ unbound_conf_file }}"
    validate: "ansible-unbound-checkconf %s"
  notify: Restart unbound

- name: Start unbound
  service:
    name: "{{ unbound_service }}"
    state: started
